/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.pos.sistemagams.vista;

import com.pos.sistemagams.vista.DialogoEntradaInventario;
import com.pos.sistemagams.dao.MovimientoInventarioDAO;
import com.pos.sistemagams.modelo.MovimientoInventario;
import com.pos.sistemagams.modelo.DetalleMovimientoInventario;
import java.awt.Component;
import java.awt.Container;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Diego
 */
public class PanelInventarioMovimientos extends javax.swing.JPanel {

    /**
     * Creates new form PanelInventarioMovimientos
     */
    // DAO para acceder a datos
    private MovimientoInventarioDAO movimientoDAO;

    public PanelInventarioMovimientos() {
        this.movimientoDAO = new MovimientoInventarioDAO();
        initComponents();
        configurarTabla();
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnEntradaInventario = new javax.swing.JButton();
        btnSalidaInventario = new javax.swing.JButton();
        btnAjusteInventario = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "FECHA REGISTRO", "TIPO", "CLAVE", "NOMBRE DEL PRODUCTO/DESCRIPCION", "U.M", "PUESTO/ALMACEN/GIRO", "PRECIO TOTAL", "COSTO TOTAL", "CANTIDAD"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(100);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setMinWidth(100);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setMinWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setMinWidth(300);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(4).setMinWidth(20);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(5).setMinWidth(300);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(6).setMinWidth(50);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(7).setMinWidth(50);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(8).setMinWidth(50);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(50);
        }

        btnEntradaInventario.setText("ENTRADA INV");
        btnEntradaInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntradaInventarioActionPerformed(evt);
            }
        });

        btnSalidaInventario.setText("SALIDA INV");
        btnSalidaInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalidaInventarioActionPerformed(evt);
            }
        });

        btnAjusteInventario.setText("AJUSTE INV");
        btnAjusteInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjusteInventarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1535, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalidaInventario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAjusteInventario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEntradaInventario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(btnEntradaInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSalidaInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAjusteInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Configura la tabla para que no sea editable y tenga mejor apariencia
     */
    private void configurarTabla() {
        // Hacer que la tabla no sea editable
        jTable1.setDefaultEditor(Object.class, null);

        // Configurar selección de fila completa
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setRowSelectionAllowed(true);
        jTable1.setColumnSelectionAllowed(false);

        // Configurar altura de fila
        jTable1.setRowHeight(25);

        // Configurar colores alternados (opcional)
        jTable1.setShowGrid(true);
        jTable1.setGridColor(java.awt.Color.LIGHT_GRAY);
    }

    /**
     * Carga todos los movimientos de inventario en la tabla
     */
    public void cargarDatos() {
        try {
            System.out.println("🔄 Cargando movimientos de inventario...");

            // Obtener el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

            // Limpiar datos existentes
            modelo.setRowCount(0);

            // Obtener todos los movimientos
            List<MovimientoInventario> movimientos = movimientoDAO.obtenerMovimientos();

            System.out.println("📋 Encontrados " + movimientos.size() + " movimientos");

            // Formatear fechas
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy HH:mm");

            // Agregar cada movimiento a la tabla
            for (MovimientoInventario movimiento : movimientos) {
                // Obtener detalles del movimiento
                List<DetalleMovimientoInventario> detalles = movimientoDAO.obtenerDetallesMovimiento(movimiento.getIdMovimiento());

                // Si el movimiento tiene detalles, mostrar cada producto
                if (!detalles.isEmpty()) {
                    for (DetalleMovimientoInventario detalle : detalles) {
                        Object[] fila = {
                            // FECHA REGISTRO
                            movimiento.getFechaMovimiento() != null
                            ? formatoFecha.format(java.sql.Timestamp.valueOf(movimiento.getFechaMovimiento()))
                            : "Sin fecha",
                            // TIPO
                            movimiento.getTipoMovimiento(),
                            // CLAVE
                            detalle.getCodigoProducto() != null ? detalle.getCodigoProducto() : "Sin código",
                            // NOMBRE DEL PRODUCTO/DESCRIPCION
                            detalle.getNombreProducto() != null ? detalle.getNombreProducto() : "Sin nombre",
                            // U.M
                            detalle.getUnidadMedida() != null ? detalle.getUnidadMedida() : "UND",
                            // PUESTO/ALMACEN/GIRO
                            movimiento.getNombreAlmacen() != null ? movimiento.getNombreAlmacen() : "Sin almacén",
                            // PRECIO TOTAL (usando precio_venta_1 * cantidad)
                            String.format("%.2f", detalle.getPrecioVenta1().multiply(detalle.getCantidad())),
                            // COSTO TOTAL
                            String.format("%.2f", detalle.getSubtotal()),
                            // CANTIDAD
                            String.format("%.2f", detalle.getCantidad())
                        };

                        modelo.addRow(fila);
                    }
                } else {
                    // Si no hay detalles, mostrar solo el movimiento
                    Object[] fila = {
                        movimiento.getFechaMovimiento() != null
                        ? formatoFecha.format(java.sql.Timestamp.valueOf(movimiento.getFechaMovimiento()))
                        : "Sin fecha",
                        movimiento.getTipoMovimiento(),
                        movimiento.getNumeroMovimiento(),
                        "Movimiento sin detalles",
                        "-",
                        movimiento.getNombreAlmacen() != null ? movimiento.getNombreAlmacen() : "Sin almacén",
                        String.format("%.2f", movimiento.getTotalCosto()),
                        String.format("%.2f", movimiento.getTotalCosto()),
                        String.format("%.2f", movimiento.getTotalCantidad())
                    };

                    modelo.addRow(fila);
                }
            }

            System.out.println("✅ Datos cargados en la tabla: " + modelo.getRowCount() + " filas");

        } catch (Exception e) {
            System.err.println("❌ Error al cargar movimientos: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error al cargar los movimientos de inventario: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Refresca los datos de la tabla
     */
    public void refrescarDatos() {
        SwingUtilities.invokeLater(() -> {
            cargarDatos();
        });
    }

    /**
     * Notifica a otros paneles que el stock se ha actualizado
     */
    private void notificarActualizacionStock() {
        try {
            System.out.println("🔔 Notificando actualización de stock usando InventarioUpdateManager...");

            // Usar el manager para notificar a todos los listeners
            InventarioUpdateManager.getInstance().notificarInventarioActualizado();

            System.out.println("✅ Notificación enviada a "
                    + InventarioUpdateManager.getInstance().getListenerCount() + " listeners");

        } catch (Exception e) {
            System.err.println("❌ Error al notificar actualización de stock: " + e.getMessage());
            e.printStackTrace();
        }
    }
    // ========================================
    // EVENTOS DE BOTONES (MODIFICADOS)
    // ========================================

    private void btnEntradaInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntradaInventarioActionPerformed
        try {
            DialogoEntradaInventario dialogo = new DialogoEntradaInventario(this);
            dialogo.setVisible(true);

            if (dialogo.isGuardadoExitosamente()) {
                System.out.println("✅ Entrada guardada, refrescando datos...");
                refrescarDatos();

                // ✅ NOTIFICAR USANDO EL NUEVO SISTEMA
                notificarActualizacionStock();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al abrir entrada de inventario: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnEntradaInventarioActionPerformed

    private void btnSalidaInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalidaInventarioActionPerformed
        try {
            DialogoSalidaInventario dialogo = new DialogoSalidaInventario(this);
            dialogo.setVisible(true);

            if (dialogo.isGuardadoExitosamente()) {
                System.out.println("✅ Salida guardada, refrescando datos...");
                refrescarDatos();

                // ✅ NOTIFICAR USANDO EL NUEVO SISTEMA
                notificarActualizacionStock();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al abrir salida de inventario: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSalidaInventarioActionPerformed

    private void btnAjusteInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjusteInventarioActionPerformed
        try {
            DialogoAjusteInventario dialogo = new DialogoAjusteInventario(this);
            dialogo.setVisible(true);

            if (dialogo.isGuardadoExitosamente()) {
                System.out.println("✅ Ajuste guardado, refrescando datos...");
                refrescarDatos();

                // ✅ NOTIFICAR USANDO EL NUEVO SISTEMA
                notificarActualizacionStock();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al abrir ajuste de inventario: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAjusteInventarioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAjusteInventario;
    private javax.swing.JButton btnEntradaInventario;
    private javax.swing.JButton btnSalidaInventario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
